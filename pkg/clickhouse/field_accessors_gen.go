// Code generated by go run pkg/codegen/main.go; DO NOT EDIT.

package clickhouse

import (
	"github.com/DIMO-Network/cloudevent"
)

// RestoreNonColumnFields restores non-column fields from Extras
func RestoreNonColumnFields(event *cloudevent.CloudEventHeader) {
	if event.Extras == nil || len(event.Extras) == 0 {
		return
	}
	// Restore SpecVersion field
	if val, ok := event.Extras["specversion"]; ok {
		if typedVal, ok := val.(string); ok {
			event.SpecVersion = typedVal
			delete(event.Extras, "specversion")
		}
	}
	// Restore DataSchema field
	if val, ok := event.Extras["dataschema"]; ok {
		if typedVal, ok := val.(string); ok {
			event.DataSchema = typedVal
			delete(event.Extras, "dataschema")
		}
	}
	// Restore Signature field
	if val, ok := event.Extras["signature"]; ok {
		if typedVal, ok := val.(string); ok {
			event.Signature = typedVal
		}
	}
}

// AddNonColumnFieldsToExtras adds fields without dedicated columns to Extras
func AddNonColumnFieldsToExtras(event *cloudevent.CloudEventHeader) map[string]any {
	extras := event.Extras
	// Prepare extras map if it's nil
	if extras == nil {
		extras = make(map[string]any)
	} else {
		// Create a copy of extras to avoid modifying the original
		originalExtras := extras
		extras = make(map[string]any, len(originalExtras))
		for k, v := range originalExtras {
			extras[k] = v
		}
	}

	// Add SpecVersion to extras if not zeros
	if event.SpecVersion != "" {
		extras["specversion"] = event.SpecVersion
	}
	// Add DataSchema to extras if not zeros
	if event.DataSchema != "" {
		extras["dataschema"] = event.DataSchema
	}
	// Add Signature to extras if not zeros
	if event.Signature != "" {
		extras["signature"] = event.Signature
	}
	return extras
}

// isZeroValue checks if a value is the zero value for its type.
func isZeroValue[T comparable](v T) bool {
	var zero T
	return v == zero
}
